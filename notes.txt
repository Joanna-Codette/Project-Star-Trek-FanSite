
----------------------------------------------------
-the latest version of the coding written with Trew-
----------------------------------------------------
searchButton.addEventListener('submit', evt => {
    evt.preventDefault();  //don't do anything, STOP!
    console.log("default preventing");

    //get the values and put that in an object
    const formInput = {
        email: document.querySelector('#email-search').value,
    };

    // fetch - package up in the back-end (mailing it to the address)
    fetch('/searchResult.json', {
        method: 'POST',
        body: JSON.stringify(formInput),
        headers: {
            'Content-Type': 'application/json',
        },
    })
        // . when the mail arrives, and then response
        .then((response) => response.json())
        .then((result) => {
            console.log(result)
            document.querySelector("#searchResult").innerHTML = `<p>${result.reviews}</p>`
        }) 
    
})


--------------------------------------------------------------
search_dispaly.html
      console.log("default preventing");

    //get the values and put that in an object
    const formInput = {
        email: document.querySelector('#email-search').value
    };

    // fetch - package up in the back-end (mailing it to the address)
    fetch('/searchResult.json', {
        method: 'POST',
        body: JSON.stringify(formInput),
        headers: {
            'Content-Type': 'application/json',
        },
    })
        // . when the mail arrives, and then response
        .then((response) => response.json())
        .then(alert(response));  // check if it is successful


-------------------------------------------------------------
-       @app.route search_display() in server.py            -
-------------------------------------------------------------
@app.route('/searchResult.json', methods=["POST"]) #remember to put method
def search_display():
    """Search the email and display all the movies and ratings by this email"""
    email = request.json.get('email')

    user = crud.get_user_by_email(email)
    
    newlst = []
    if not user:    
        result_code = "ERROR" 
        result_text = "Can't find emails!"
    else:
        print(user.reviews)
        result_code = "OK"
        result_text = f"You got search results!"
        for review in user.reviews:  #fill in the newlst with the dictionary
            newDict = {'review_title': review.review_title,
                       'user_review': review.user_review,
                       }
            newlst.append(newDict)   #pull out the info and put in a format that can be mail
    
        # create a result dictionary
        #sendDict = {"code": result_code, "msg": result_text,
        #            "reviews": newlst,
        #}
        
    return jsonify(newlst)
     #{nomral dictionary is created, and we put a couple of key value pairs}
     #jsonify turns the dictionary in a special kind of string, to send to the 
     #front-end and turn it back into an object
------------------------------------------------------------
html
<!-- <h1>{{ user.email }}</h1> -->
<!-- <ul> -->
{% for rating in user.ratings %}
    <li>
        {{ rating.movie.title }}:
        <span class=rating_num_{{ rating.rating_id }}>
            {{ rating.score }}
        </span>
        {% if session["user_email"] == user.email %}
        <button class="edit-movie-rating" id={{ rating.rating_id }}> Edit rating </button>
        {% endif %}
    </li>
{% endfor %}
</ul>
  <ul>
    <!-- {% for user in users %} -->
      <!-- <li> -->
        <!-- <a href="/users/{{ user.user_id }}"> -->
            <!-- {{ user.email }} -->
        <!-- </a> -->
      <!-- </li> -->
    <!-- {% endfor %} -->
  </ul>
-------------------------------------------------
-                  Update ratings.js            -
-------------------------------------------------

editButtons = document.querySelectorAll('.edit-movie-rating');

for (const button of editButtons) {
  button.addEventListener('click', () => {
    // first ask the user what they want the new rating to be
    const newScore = prompt('What is your new score for this movie?');
    const formInputs = {
      updated_score: newScore,
      rating_id: button.id,
    };

    // send a fetch request to the update_rating route
    fetch('/update_rating', {
      method: 'POST',
      body: JSON.stringify(formInputs),
      headers: {
        'Content-Type': 'application/json',
      },
    }).then((response) => {
      if (response.ok) {
        document.querySelector(`span.rating_num_${button.id}`).innerHTML = newScore;
      } else {
        alert('Failed to update rating.');
      }
    });
  });
}


--------------------------------------------
"""
@app.route('/searchResult.json', methods=["POST"]) #remember to put method
def search_display():
    #Search the email and display all the movies and ratings by this email
    email = request.json.get('email')

    user = crud.get_user_by_email(email)
    
    newlst = []
    if not user:    
        result_code = "ERROR" 
        result_text = "Can't find emails!"
    else:
        print(user.reviews)
        result_code = "OK"
        result_text = f"You got search results!"
        for review in user.reviews:  #fill in the newlst with the dictionary
            newDict = {'review_title': review.review_title,
                       'user_review': review.user_review,
                       }
            newlst.append(newDict)   #pull out the info and put in a format that can be mail
    
    return jsonify(newlst)
"""



<ul>
{% for rating in user.ratings %}
    <li>
        {{rating.movie.title}}: <span id="score_{{ rating.rating_id }}">{{ rating.score }}</span>
          {% if session.get("user_email") == user.email %}
            <button class="edit-movie-rating" id="{{ rating.rating_id }}"> Edit rating </button>
        {% endif %}
    </li>
{% endfor %}
</ul>

<script src="/static/updateRatings.js"></script>